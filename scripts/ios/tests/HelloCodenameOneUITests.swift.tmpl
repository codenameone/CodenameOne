import XCTest

final class HelloCodenameOneUITests: XCTestCase {
    private var app: XCUIApplication!
    private var outputDirectory: URL!

    override func setUpWithError() throws {
        continueAfterFailure = false

        app = XCUIApplication()
        let environment = ProcessInfo.processInfo.environment
        if let outputPath = environment["CN1SS_OUTPUT_DIR"], !outputPath.isEmpty {
            outputDirectory = URL(fileURLWithPath: outputPath)
        } else {
            outputDirectory = URL(fileURLWithPath: NSTemporaryDirectory())
        }
        try FileManager.default.createDirectory(at: outputDirectory, withIntermediateDirectories: true)

        // Keep the simulator quiet and deterministic where possible
        app.launchArguments += ["-AppleLocale", "en_US", "-AppleLanguages", "(en)"]
        app.launch()
    }

    override func tearDownWithError() throws {
        app?.terminate()
        app = nil
    }

    private func captureScreenshot(named name: String) throws {
        let screenshot = XCUIScreen.main.screenshot()
        let pngURL = outputDirectory.appendingPathComponent("\(name).png")
        try screenshot.pngRepresentation.write(to: pngURL)

        let attachment = XCTAttachment(screenshot: screenshot)
        attachment.name = name
        attachment.lifetime = .keepAlways
        add(attachment)
    }

    /// Wait for the app to be in foreground and give Codename One time to render its scene.
    private func waitForStableFrame(timeout: TimeInterval = 30, settle: TimeInterval = 1.5) {
        _ = app.wait(for: .runningForeground, timeout: timeout)
        RunLoop.current.run(until: Date(timeIntervalSinceNow: settle))
    }

    /// Tap using normalized coordinates (0..1 in each axis), robust when elements aren’t exposed to XCTest.
    private func tapNormalized(_ dx: CGFloat, _ dy: CGFloat) {
        let origin = app.coordinate(withNormalizedOffset: .zero)
        let target = origin.withOffset(CGVector(dx: app.frame.size.width * dx,
                                                dy: app.frame.size.height * dy))
        target.tap()
    }

    func testMainScreenScreenshot() throws {
        waitForStableFrame()
        try captureScreenshot(named: "MainActivity")
    }

    func testBrowserComponentScreenshot() throws {
        waitForStableFrame()

        // The "Open Browser Screen" button is part of CN1’s canvas; tap where it lives visually.
        // Adjust if your layout changes; these coords are centered and a bit lower on the screen.
        tapNormalized(0.5, 0.70)

        // Give the BrowserComponent time to paint
        RunLoop.current.run(until: Date(timeIntervalSinceNow: 2.0))
        try captureScreenshot(named: "BrowserComponent")
    }
}