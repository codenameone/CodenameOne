#import <XCTest/XCTest.h>
#import <UIKit/UIKit.h>

@interface HelloCodenameOneUITests : XCTestCase
@property(nonatomic, strong) XCUIApplication *app;
@end

@implementation HelloCodenameOneUITests

- (void)setUpWithError:(NSError *__autoreleasing  _Nullable *)error {
    [super setUpWithError:error];
    self.continueAfterFailure = NO;

    NSDictionary *env = NSProcessInfo.processInfo.environment;
    NSLog(@"CN1SS:INFO:env=%@", env);

    NSString *bundleID = env[@"CN1_AUT_BUNDLE_ID"];
    if (bundleID.length > 0) {
        NSLog(@"CN1SS:INFO:ui_test_target_bundle_id=%@", bundleID);
        self.app = [[XCUIApplication alloc] initWithBundleIdentifier:bundleID];
    } else {
        NSLog(@"CN1SS:INFO:ui_test_target_bundle_id=(default)");
        self.app = [[XCUIApplication alloc] init];
    }

    self.app.launchArguments = @[
        @"-AppleLocale", @"en_US",
        @"-AppleLanguages", @"(en)",
        @"--cn1-test-mode", @"1"
    ];

    [self saveScreen:@"pre_launch"];
    NSLog(@"CN1SS:INFO:launch:start args=%@", self.app.launchArguments);
    [self.app launch];

    [self waitForAppToEnterForegroundWithTimeout:60.0 step:1.5 label:@"post_launch"];
    NSLog(@"CN1SS:INFO:state_after_launch=%ld", (long)self.app.state);
    if (self.app.state != XCUIApplicationStateRunningForeground) {
        NSLog(@"CN1SS:WARN:not_foreground:attempting_relaunch");
        [self.app terminate];
        [self saveScreen:@"pre_relaunch"];
        [self.app launch];
        [self waitForAppToEnterForegroundWithTimeout:40.0 step:1.5 label:@"post_relaunch"];
        NSLog(@"CN1SS:INFO:state_after_relaunch=%ld", (long)self.app.state);
    }
}

- (void)tearDownWithError:(NSError *__autoreleasing  _Nullable *)error {
    [self.app terminate];
    self.app = nil;
    [super tearDownWithError:error];
}

#pragma mark - REAL TEST(S)

- (void)testSmokeLaunchAndScreenshot {
    // If we got here, setUpWithError ran (launch done). Emit one CN1SS screenshot.
    [self emitCn1ssScreenshotNamed:@"MainActivity"];
    // A trivial assertion so XCTest reports 1 test executed
    XCTAssertTrue(self.app.state == XCUIApplicationStateRunningForeground || self.app.exists);
}

#pragma mark - CN1SS helpers (compact)

- (void)emitCn1ssScreenshotNamed:(NSString *)name {
    XCUIScreenshot *shot = self.app.screenshot ?: XCUIScreen.mainScreen.screenshot;
    if (!shot) { NSLog(@"CN1SS:WARN:test=%@ no_screenshot", name); return; }
    NSData *png = shot.PNGRepresentation;
    if (png.length == 0) { NSLog(@"CN1SS:WARN:test=%@ empty_png", name); return; }

    // Emit raw channel
    [self cn1ssEmitChannel:@""
                      name:name
                     bytes:png];

    // Emit a small preview JPEG if possible
    UIImage *img = [UIImage imageWithData:png];
    if (img) {
        NSData *jpeg = UIImageJPEGRepresentation(img, 0.1); // ~very small preview
        if (jpeg.length > 0) {
            [self cn1ssEmitChannel:@"PREVIEW" name:name bytes:jpeg];
        }
    }

    // Also attach to the test for convenience
    XCTAttachment *att = [XCTAttachment attachmentWithScreenshot:shot];
    att.name = name;
    att.lifetime = XCTAttachmentLifetimeKeepAlways;
    [self addAttachment:att];
}

- (void)cn1ssEmitChannel:(NSString *)channel name:(NSString *)name bytes:(NSData *)bytes {
    if (bytes.length == 0) return;
    NSString *prefix = channel.length ? [@"CN1SS" stringByAppendingString:channel] : @"CN1SS";
    NSString *b64 = [bytes base64EncodedStringWithOptions:0];
    NSUInteger chunkSize = 2000, pos = 0, chunks = 0;
    while (pos < b64.length) {
        NSUInteger len = MIN(chunkSize, b64.length - pos);
        NSString *chunk = [b64 substringWithRange:NSMakeRange(pos, len)];
        printf("%s:%s:%06lu:%s\n",
               prefix.UTF8String,
               name.UTF8String,
               (unsigned long)pos,
               chunk.UTF8String);
        pos += len;
        chunks += 1;
    }
    printf("CN1SS:END:%s\n", name.UTF8String);
    printf("CN1SS:INFO:test=%s chunks=%lu total_b64_len=%lu\n",
           name.UTF8String, (unsigned long)chunks, (unsigned long)b64.length);
}

#pragma mark - Telemetry helpers

- (void)saveScreen:(NSString *)name {
    XCUIScreenshot *shot = XCUIScreen.mainScreen.screenshot ?: self.app.screenshot;
    if (!shot) return;
    NSData *png = shot.PNGRepresentation;
    NSString *tmp = NSTemporaryDirectory();
    NSString *dir = [tmp stringByAppendingPathComponent:@"cn1screens"];
    [[NSFileManager defaultManager] createDirectoryAtPath:dir withIntermediateDirectories:YES attributes:nil error:nil];
    NSString *path = [dir stringByAppendingPathComponent:[name stringByAppendingString:@".png"]];
    [png writeToFile:path atomically:NO];
    NSLog(@"CN1SS:INFO:saved_screenshot name=%@ path=%@", name, path);
    XCTAttachment *att = [XCTAttachment attachmentWithScreenshot:shot];
    att.name = name;
    att.lifetime = XCTAttachmentLifetimeKeepAlways;
    [self addAttachment:att];
}

- (void)waitForAppToEnterForegroundWithTimeout:(NSTimeInterval)timeout step:(NSTimeInterval)step label:(NSString *)label {
    NSDate *deadline = [NSDate dateWithTimeIntervalSinceNow:timeout];
    NSUInteger attempt = 0;
    while ([[NSDate date] compare:deadline] == NSOrderedAscending) {
        attempt++;
        XCUIApplicationState state = self.app.state;
        NSLog(@"CN1SS:INFO:launch_state attempt=%lu state=%ld", (unsigned long)attempt, (long)state);
        if (state == XCUIApplicationStateRunningForeground) {
            [self saveScreen:[NSString stringWithFormat:@"%@_foreground_%lu", label, (unsigned long)attempt]];
            return;
        }
        [self saveScreen:[NSString stringWithFormat:@"%@_state_%lu", label, (unsigned long)attempt]];
        [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:step]];
    }
    NSLog(@"CN1SS:WARN:%@_timeout", label);
}

@end