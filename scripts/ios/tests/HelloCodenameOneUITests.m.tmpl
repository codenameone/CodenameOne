// HelloCodenameOneUITests.m.tmpl
// Objective-C (no modules), ultra-defensive, never throws

#import <XCTest/XCTest.h>
#import <UIKit/UIKit.h>

@interface HelloCodenameOneUITests : XCTestCase
@end

@implementation HelloCodenameOneUITests {
    XCUIApplication *_app;
}

#pragma mark - Minimal, non-failable setup/teardown

- (void)setUp {
    [super setUp];
    self.continueAfterFailure = YES;

    NSDictionary *env = NSProcessInfo.processInfo.environment;
    NSLog(@"CN1SS:INFO:env=%@", env);

    NSString *bundleID = env[@"CN1_AUT_BUNDLE_ID"];
    if (bundleID.length > 0) {
        NSLog(@"CN1SS:INFO:ui_test_target_bundle_id=%@", bundleID);
        _app = [[XCUIApplication alloc] initWithBundleIdentifier:bundleID];
    } else {
        NSLog(@"CN1SS:INFO:ui_test_target_bundle_id=(default)");
        _app = [[XCUIApplication alloc] init];
    }

    _app.launchArguments = @[
        @"-AppleLocale", @"en_US",
        @"-AppleLanguages", @"(en)",
        @"--cn1-test-mode", @"1"
    ];

    [self cn1_saveScreen:@"pre_launch"];
    NSLog(@"CN1SS:INFO:launch:start args=%@", _app.launchArguments);
    [_app launch];

    [self cn1_waitForeground:_app timeout:20.0 step:0.25 label:@"post_launch"];
    NSLog(@"CN1SS:INFO:state_after_launch=%ld", (long)_app.state);

    if (_app.state != XCUIApplicationStateRunningForeground) {
        NSLog(@"CN1SS:WARN:not_foreground:attempting_relaunch");
        [_app terminate];
        [self cn1_saveScreen:@"pre_relaunch"];
        [_app launch];
        [self cn1_waitForeground:_app timeout:15.0 step:0.25 label:@"post_relaunch"];
        NSLog(@"CN1SS:INFO:state_after_relaunch=%ld", (long)_app.state);
    }
}

- (void)tearDown {
    @try { [_app terminate]; } @catch (__unused NSException *e) {}
    _app = nil;
    [super tearDown];
}

#pragma mark - Single smoke test that never throws

- (void)testSmokeLaunchAndScreenshot {
    @try {
        [self cn1_emitScreenshotNamed:@"MainActivity" app:_app];
        NSLog(@"CN1SS:INFO:final_app_state=%ld exists=%d",
              (long)_app.state, _app.exists ? 1 : 0);
    } @catch (__unused NSException *e) {
        // Swallow to avoid “failable invocation” skips
        NSLog(@"CN1SS:WARN:testSmokeLaunchAndScreenshot caught exception; continuing");
    }
    // Intentionally no assertions. We just produce CN1SS output.
}

#pragma mark - CN1SS emit + helpers (no failable XCTest calls)

- (void)cn1_emitScreenshotNamed:(NSString *)name app:(XCUIApplication *)app {
    XCUIScreenshot *shot = app.screenshot ?: XCUIScreen.mainScreen.screenshot;
    if (!shot) { NSLog(@"CN1SS:WARN:test=%@ no_screenshot", name); return; }

    NSData *png = shot.PNGRepresentation;
    if (png.length == 0) { NSLog(@"CN1SS:WARN:test=%@ empty_png", name); return; }

    // Emit raw CN1SS base64 chunks (primary signal for your parser)
    [self cn1ssEmitChannel:@"" name:name bytes:png];

    // Emit a tiny preview JPEG (optional, used by your preview step)
    UIImage *img = [UIImage imageWithData:png];
    if (img) {
        NSData *jpeg = UIImageJPEGRepresentation(img, 0.12);
        if (jpeg.length > 0) {
            [self cn1ssEmitChannel:@"PREVIEW" name:name bytes:jpeg];
        }
    }

    // Avoid potentially failable helpers; attach using a non-failable path
    // If attachment throws for any reason, swallow.
    @try {
        XCTAttachment *att = [XCTAttachment attachmentWithUniformTypeIdentifier:@"public.png"
                                                                           name:name
                                                                        payload:png
                                                                        userInfo:nil];
        att.lifetime = XCTAttachmentLifetimeKeepAlways;
        [self addAttachment:att];
    } @catch (__unused NSException *e) {}

    // Also save to tmp so you have a file on disk
    [self cn1_saveScreen:[NSString stringWithFormat:@"attach_%@", name]];
}

- (void)cn1ssEmitChannel:(NSString *)channel name:(NSString *)name bytes:(NSData *)bytes {
    if (bytes.length == 0) return;
    NSString *prefix = channel.length ? [@"CN1SS" stringByAppendingString:channel] : @"CN1SS";
    NSString *b64 = [bytes base64EncodedStringWithOptions:0];

    const NSUInteger chunkSize = 2000;
    NSUInteger pos = 0, chunks = 0;
    while (pos < b64.length) {
        @autoreleasepool {
            NSUInteger len = MIN(chunkSize, b64.length - pos);
            NSString *chunk = [b64 substringWithRange:NSMakeRange(pos, len)];
            printf("%s:%s:%06lu:%s\n",
                   prefix.UTF8String, name.UTF8String,
                   (unsigned long)pos, chunk.UTF8String);
            pos += len;
            chunks += 1;
        }
    }
    printf("CN1SS:END:%s\n", name.UTF8String);
    printf("CN1SS:INFO:test=%s chunks=%lu total_b64_len=%lu\n",
           name.UTF8String, (unsigned long)chunks, (unsigned long)b64.length);
}

- (void)cn1_saveScreen:(NSString *)name {
    XCUIScreenshot *shot = XCUIScreen.mainScreen.screenshot ?: _app.screenshot;
    if (!shot) return;
    NSData *png = shot.PNGRepresentation;
    if (png.length == 0) return;

    NSString *tmp = NSTemporaryDirectory(); if (tmp.length == 0) tmp = @"/tmp";
    NSString *dir = [tmp stringByAppendingPathComponent:@"cn1screens"];
    [[NSFileManager defaultManager] createDirectoryAtPath:dir
                              withIntermediateDirectories:YES
                                               attributes:nil
                                                    error:nil];
    NSString *path = [dir stringByAppendingPathComponent:[name stringByAppendingString:@".png"]];
    [png writeToFile:path atomically:NO];
    NSLog(@"CN1SS:INFO:saved_screenshot name=%@ path=%@", name, path);
}

- (void)cn1_waitForeground:(XCUIApplication *)app
                   timeout:(NSTimeInterval)timeout
                      step:(NSTimeInterval)step
                     label:(NSString *)label
{
    NSDate *deadline = [NSDate dateWithTimeIntervalSinceNow:timeout];
    NSUInteger attempt = 0;

    while ([[NSDate date] compare:deadline] == NSOrderedAscending) {
        attempt++;
        XCUIApplicationState state = app.state;
        NSLog(@"CN1SS:INFO:launch_state attempt=%lu state=%ld",
              (unsigned long)attempt, (long)state);

        if (state == XCUIApplicationStateRunningForeground) {
            [self cn1_saveScreen:[NSString stringWithFormat:@"%@_foreground_%lu",
                                  label, (unsigned long)attempt]];
            return;
        } else {
            [self cn1_saveScreen:[NSString stringWithFormat:@"%@_state_%lu",
                                  label, (unsigned long)attempt]];
        }

        [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:step]];
    }

    NSLog(@"CN1SS:WARN:%@_timeout state=%ld", label, (long)app.state);
}

@end