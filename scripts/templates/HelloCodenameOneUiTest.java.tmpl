package @PACKAGE@;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.os.SystemClock;
import android.util.DisplayMetrics;
import android.view.View;

import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Image;
import com.codename1.ui.util.ImageIO;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.Robolectric;
import org.robolectric.RobolectricTestRunner;
import org.robolectric.android.controller.ActivityController;
import org.robolectric.annotation.Config;
import org.robolectric.annotation.LooperMode;
import org.robolectric.shadows.ShadowLooper;

@RunWith(RobolectricTestRunner.class)
@Config(sdk = 30)
@LooperMode(LooperMode.Mode.LEGACY)
public class @MAIN_NAME@UiTest {

    private static final long STARTUP_TIMEOUT_MS = 30_000L;
    private static final long LAYOUT_TIMEOUT_MS = 5_000L;
    private static final long EDT_TIMEOUT_MS = 10_000L;

    private ActivityController<@MAIN_NAME@Stub> controller;
    private @MAIN_NAME@Stub activity;

    @Before
    public void setUp() {
        controller = Robolectric.buildActivity(@MAIN_NAME@Stub.class);
        activity = controller.setup().get();
        waitForCodenameOneForm();
    }

    @After
    public void tearDown() {
        if (controller != null) {
            controller.pause();
            controller.stop();
            controller.destroy();
        }
    }

    @Test
    public void mainFormScreenshotContainsRenderedContent() throws Exception {
        View decorView = activity.getWindow().getDecorView();
        assertNotNull("Activity decor view should be available", decorView);

        ensureViewHasLayout(decorView);

        ShadowLooper.runUiThreadTasksIncludingDelayedTasks();
        Bitmap androidScreenshot = captureBitmap(decorView);
        assertTrue("Android screenshot width should be positive", androidScreenshot.getWidth() > 0);
        assertTrue("Android screenshot height should be positive", androidScreenshot.getHeight() > 0);
        assertTrue(
                "Android screenshot should contain rendered content beyond the background",
                hasRenderableContent(androidScreenshot));

        File androidScreenshotFile = saveBitmap(androidScreenshot, "@MAIN_NAME@-android-ui.png");
        assertTrue("Android screenshot file should exist", androidScreenshotFile.isFile());
        assertTrue("Android screenshot file should not be empty", androidScreenshotFile.length() > 0L);

        ShadowLooper.runUiThreadTasksIncludingDelayedTasks();
        Image codenameOneScreenshot = captureCodenameOneScreenshot();
        assertNotNull("Codename One screenshot should be available", codenameOneScreenshot);
        assertTrue("Codename One screenshot width should be positive", codenameOneScreenshot.getWidth() > 0);
        assertTrue("Codename One screenshot height should be positive", codenameOneScreenshot.getHeight() > 0);
        assertTrue(
                "Codename One screenshot should contain rendered content beyond the background",
                hasRenderableContent(codenameOneScreenshot));

        File codenameOneScreenshotFile = saveCodenameOneScreenshot(
                codenameOneScreenshot,
                "@MAIN_NAME@-codenameone-ui.png");
        assertTrue("Codename One screenshot file should exist", codenameOneScreenshotFile.isFile());
        assertTrue("Codename One screenshot file should not be empty", codenameOneScreenshotFile.length() > 0L);
    }

    private static Bitmap captureBitmap(View view) {
        Bitmap bitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        view.draw(canvas);
        return bitmap;
    }

    private static void ensureViewHasLayout(View view) {
        long deadline = SystemClock.uptimeMillis() + LAYOUT_TIMEOUT_MS;
        DisplayMetrics metrics = view.getResources().getDisplayMetrics();
        int widthSpec = View.MeasureSpec.makeMeasureSpec(metrics.widthPixels, View.MeasureSpec.EXACTLY);
        int heightSpec = View.MeasureSpec.makeMeasureSpec(metrics.heightPixels, View.MeasureSpec.EXACTLY);

        while ((view.getWidth() == 0 || view.getHeight() == 0) && SystemClock.uptimeMillis() < deadline) {
            view.measure(widthSpec, heightSpec);
            view.layout(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight());
            ShadowLooper.runUiThreadTasksIncludingDelayedTasks();
            SystemClock.sleep(16L);
        }

        if (view.getWidth() == 0 || view.getHeight() == 0) {
            throw new AssertionError("Timed out waiting for decor view to obtain layout bounds");
        }
    }

    private static boolean hasRenderableContent(Bitmap screenshot) {
        int width = screenshot.getWidth();
        int height = screenshot.getHeight();
        int[] pixels = new int[width * height];
        screenshot.getPixels(pixels, 0, width, 0, 0, width, height);
        return hasRenderableContent(pixels, width, height);
    }

    private static boolean hasRenderableContent(Image screenshot) throws Exception {
        int width = screenshot.getWidth();
        int height = screenshot.getHeight();
        int[] pixels = callOnEdt(screenshot::getRGB);
        return hasRenderableContent(pixels, width, height);
    }

    private static boolean hasRenderableContent(int[] pixels, int width, int height) {
        if (width <= 0 || height <= 0 || pixels == null || pixels.length == 0) {
            return false;
        }
        int background = pixels[0];
        int contentPixels = 0;
        for (int argb : pixels) {
            int alpha = (argb >>> 24) & 0xFF;
            if (alpha == 0) {
                continue;
            }
            if (argb != background) {
                contentPixels++;
                if (contentPixels > width) {
                    return true;
                }
            }
        }
        return false;
    }

    private static File saveBitmap(Bitmap screenshot, String fileName) throws IOException {
        File outputDir = resolveArtifactDirectory();
        File screenshotFile = new File(outputDir, fileName);
        try (FileOutputStream out = new FileOutputStream(screenshotFile)) {
            if (!screenshot.compress(Bitmap.CompressFormat.PNG, 100, out)) {
                throw new IOException("Failed to encode Android screenshot as PNG");
            }
        }
        return screenshotFile;
    }

    private static File saveCodenameOneScreenshot(Image screenshot, String fileName) throws Exception {
        File outputDir = resolveArtifactDirectory();
        File screenshotFile = new File(outputDir, fileName);
        ImageIO io = callOnEdt(() -> Display.getInstance().getImageIO());
        assertNotNull("Codename One ImageIO should be available", io);
        try (FileOutputStream out = new FileOutputStream(screenshotFile)) {
            FileOutputStream stream = out;
            callOnEdt(() -> {
                io.save(screenshot, stream, ImageIO.FORMAT_PNG, 1.0f);
                return null;
            });
        }
        return screenshotFile;
    }

    private static File resolveArtifactDirectory() throws IOException {
        String directory = System.getenv("CN1_TEST_SCREENSHOT_DIR");
        File outputDir = (directory != null && !directory.isEmpty())
                ? new File(directory)
                : new File("build/ui-test-screenshots");
        if (!outputDir.exists() && !outputDir.mkdirs()) {
            throw new IOException("Failed to create screenshot directory " + outputDir.getAbsolutePath());
        }
        return outputDir;
    }

    private static void waitForCodenameOneForm() {
        long deadline = SystemClock.uptimeMillis() + STARTUP_TIMEOUT_MS;
        while (SystemClock.uptimeMillis() < deadline) {
            ShadowLooper.runUiThreadTasksIncludingDelayedTasks();
            if (Display.isInitialized()) {
                Form current = Display.getInstance().getCurrent();
                if (current != null) {
                    return;
                }
            }
            SystemClock.sleep(16L);
        }
        throw new AssertionError("Timed out waiting for Codename One main form to be displayed");
    }

    private static Image captureCodenameOneScreenshot() throws Exception {
        return callOnEdt(() -> Display.getInstance().captureScreen());
    }

    private static <T> T callOnEdt(Callable<T> callable) throws Exception {
        FutureTask<T> task = new FutureTask<>(callable);
        Display.getInstance().callSerially(task);
        long deadline = SystemClock.uptimeMillis() + EDT_TIMEOUT_MS;
        while (!task.isDone() && SystemClock.uptimeMillis() < deadline) {
            ShadowLooper.runUiThreadTasksIncludingDelayedTasks();
            SystemClock.sleep(4L);
        }
        if (!task.isDone()) {
            throw new AssertionError("Timed out waiting for Codename One EDT task to finish");
        }
        return task.get();
    }
}
