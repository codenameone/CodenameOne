package @PACKAGE@;

import com.codename1.ui.Button;
import com.codename1.ui.BrowserComponent;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Label;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;

public class @MAIN_NAME@ {
    private Form current;
    private Form mainForm;
    private boolean initBootstrapScheduled;

    public void init(Object context) {
        System.out.println("CN1SS:INFO:codenameone_init context=" + (context == null ? "null" : context.getClass().getName()));
        System.out.println("CN1SS:INFO:codenameone_init_display_initialized=" + Display.isInitialized());
        if (!initBootstrapScheduled) {
            initBootstrapScheduled = true;
            Display.getInstance().callSerially(() -> {
                System.out.println("CN1SS:INFO:codenameone_init_serial_bootstrap begin=true");
                ensureMainFormVisible("init_serial");
            });
        }
    }

    public void start() {
        System.out.println("CN1SS:INFO:codenameone_start current_exists=" + (current != null));
        Display display = Display.getInstance();
        int density = display.getDeviceDensity();
        String densityBucket;
        try {
            densityBucket = display.getDensityStr();
        } catch (IllegalStateException ex) {
            densityBucket = "unknown";
        }
        double densityScale = density > 0 ? ((double) density) / Display.DENSITY_MEDIUM : 0.0;
        String densityScaleStr = formatScale(densityScale);
        System.out.println("CN1SS:INFO:codenameone_start_display_initialized=" + display.isInitialized()
                + " display_size=" + display.getDisplayWidth() + "x" + display.getDisplayHeight()
                + " device_density=" + density
                + " density_bucket=" + densityBucket
                + " density_scale=" + densityScaleStr);
        if (current != null) {
            System.out.println("CN1SS:INFO:codenameone_restore_previous_form title=" + current.getTitle());
            current.show();
            return;
        }
        ensureMainFormVisible("start");
    }

    public void stop() {
        System.out.println("CN1SS:INFO:codenameone_stop capturing_current_form=true");
        current = Display.getInstance().getCurrent();
        if (current != null) {
            System.out.println("CN1SS:INFO:codenameone_stop_form title=" + current.getTitle());
        }
    }

    public void destroy() {
        System.out.println("CN1SS:INFO:codenameone_destroy invoked=true");
        // Nothing to clean up for this sample
    }

    private void buildMainFormIfNeeded() {
        if (mainForm == null) {
            System.out.println("CN1SS:INFO:codenameone_build_main_form start=true");
            mainForm = new Form("Main Screen", new BorderLayout());

            Container content = new Container(BoxLayout.y());
            content.getAllStyles().setBgColor(0x1f2937);
            content.getAllStyles().setBgTransparency(255);
            content.getAllStyles().setPadding(6, 6, 6, 6);
            content.getAllStyles().setFgColor(0xf9fafb);

            Label heading = new Label("Hello Codename One");
            heading.getAllStyles().setFgColor(0x38bdf8);
            heading.getAllStyles().setMargin(0, 4, 0, 0);

            Label body = new Label("Instrumentation main activity preview");
            body.getAllStyles().setFgColor(0xf9fafb);

            Button openBrowser = new Button("Open Browser Screen");
            openBrowser.addActionListener(evt -> {
                System.out.println("CN1SS:INFO:codenameone_open_browser_action triggered=true");
                showBrowserForm();
            });

            content.add(heading);
            content.add(body);
            content.add(openBrowser);

            mainForm.add(BorderLayout.CENTER, content);
            System.out.println("CN1SS:INFO:codenameone_build_main_form complete=true");
        }
    }

    private void ensureMainFormVisible(String reason) {
        buildMainFormIfNeeded();
        Display display = Display.getInstance();
        Form visible = display.getCurrent();
        if (visible != mainForm) {
            current = mainForm;
            mainForm.show();
            System.out.println("CN1SS:INFO:codenameone_main_form_presented reason=" + reason);
        } else {
            current = mainForm;
            System.out.println("CN1SS:INFO:codenameone_main_form_already_visible reason=" + reason);
        }
        Display.getInstance().callSerially(() -> logFormMetrics("codenameone_main_form_ready", Display.getInstance().getCurrent()));
    }

    private void showMainForm() {
        buildMainFormIfNeeded();
        current = mainForm;
        mainForm.show();
        System.out.println("CN1SS:INFO:codenameone_main_form_shown title=" + mainForm.getTitle());
        Display.getInstance().callSerially(() -> logFormMetrics("codenameone_main_form_ready", Display.getInstance().getCurrent()));
    }

    private void showBrowserForm() {
        System.out.println("CN1SS:INFO:codenameone_build_browser_form start=true");
        Form browserForm = new Form("Browser Screen", new BorderLayout());

        BrowserComponent browser = new BrowserComponent();
        String html = buildBrowserHtml();
        System.out.println("CN1SS:INFO:codenameone_browser_html_length=" + html.length());
        browser.setPage(html, null);
        browserForm.add(BorderLayout.CENTER, browser);
        browserForm.getToolbar().addMaterialCommandToLeftBar(
                "Back",
                FontImage.MATERIAL_ARROW_BACK,
                evt -> {
                    System.out.println("CN1SS:INFO:codenameone_browser_back_action triggered=true");
                    ensureMainFormVisible("browser_back");
                }
        );

        current = browserForm;
        browserForm.show();
        System.out.println("CN1SS:INFO:codenameone_browser_form_shown title=" + browserForm.getTitle());
        Display.getInstance().callSerially(() -> logFormMetrics("codenameone_browser_form_ready", Display.getInstance().getCurrent()));
    }

    private void logFormMetrics(String label, Form form) {
        if (form == null) {
            System.out.println("CN1SS:WARN:" + label + " form=null");
            return;
        }
        System.out.println("CN1SS:INFO:" + label
                + " title=" + form.getTitle()
                + " width=" + form.getWidth()
                + " height=" + form.getHeight()
                + " component_count=" + form.getComponentCount());
    }

    private String formatScale(double scale) {
        if (scale <= 0) {
            return "0";
        }
        int rounded = (int) (scale * 100 + 0.5);
        int integerPart = rounded / 100;
        int fractionPart = Math.abs(rounded % 100);
        if (fractionPart == 0) {
            return Integer.toString(integerPart);
        }
        if (fractionPart < 10) {
            return integerPart + ".0" + fractionPart;
        }
        return integerPart + "." + fractionPart;
    }

    private String buildBrowserHtml() {
        return "<html><head><meta charset='utf-8'/>"
                + "<style>body{margin:0;font-family:sans-serif;background:#0e1116;color:#f3f4f6;}"
                + ".container{padding:24px;text-align:center;}h1{font-size:24px;margin-bottom:12px;}"
                + "p{font-size:16px;line-height:1.4;}span{color:#4cc9f0;}</style></head>"
                + "<body><div class='container'><h1>Codename One</h1>"
                + "<p>BrowserComponent <span>instrumentation</span> test content.</p></div></body></html>";
    }
}
