== Working with iOS

=== Troubleshooting iOS Debug Build installs

If you have access to a Mac you can connect a cable and open Xcode where you can use the device explorer console to look at messages which sometimes give a clue about what went wrong. If not, here is a laundry list of a few things that might fail:

- Make sure you built the debug version and not the appstore version. The appstore version won't install on the device and can only be distributed via Apple's store or testflight

- Check the the UDID is correct - if you got the UDID from an app then it's probably wrong as apps don't have access to the device UDID anymore. The way to get the UDID is either thru iOS Settings app or itunes

- Make sure the device isn't locked for installing 3rd party apps. I've had this when trying to install on my kids tablet which I configured to be child safe. This is configured in the settings as parental controls

- Check that you "own" the package name. E.g. if you previously installed an app with the same package name but a different certificate a new install will fail (this is true for Android too). So if you installed the kitchen sink from the store then built one of your own and installed it there will be a collision. +
Notice that this might be problematic if you use overly generic package names as someone else might have used them which is why you must always use your own domain

- Make sure the device has a modern enough version of iOS for the dependencies. As of 2024, Codename One builds target iOS 12.0 or newer by default. You can raise the requirement with the `ios.deployment_target` build hint if a library needs a newer version.

- Verify that you are using Safari when installing on the device (if you tried via cable that's not a problem), some developers had issues with firefox not launching the install process

- Check that the build hint `ios.includePush` is set in a way that matches your iOS provisioning. So it must be false if you don't have push within the provisioning profile

[[section-ios-launch-screen]]
=== Launch Screen Storyboard Best Practices

Launch screen storyboards are the default approach for Codename One iOS builds. Apple requires a storyboard-based launch experience for modern devices, so the legacy screenshot generator was removed in favour of a single, adaptive layout. You can still opt back into the old behaviour by setting the `ios.generateSplashScreens=true` build hint, but we recommend adopting a storyboard unless you have a very specific use case that can't be expressed with Auto Layout.

==== Key Files

The build server provides a minimal launch storyboard automatically. Customise it by adding any of the following files under your project's `native/ios` directory:

. `Launch.Foreground.png` - Shown in the centre of the screen instead of your app icon.
. `Launch.Background.png` - Drawn behind the content to provide a colour or illustration.
. `LaunchScreen.storyboard` - A custom storyboard created in Xcode that replaces the default layout entirely.

IMPORTANT: Make sure to add the `ios.multitasking=true` build hint, or your launch storyboard will not be used.

==== Designing a Flexible Layout

Keep the launch storyboard simple and static. The layout is rendered before your app code runs, so avoid views that depend on live data or animation. Follow these guidelines when editing `LaunchScreen.storyboard` in Xcode:

* Use Auto Layout constraints and safe-area guides so the design scales to every device, including split view on iPad.
* Prefer system colours or vector/PDF assets for logos so the result stays crisp on high-density screens and supports Dark Mode.
* Reserve text for short taglines or status messages that do not need localisation at launch. Dynamic localisation is not available.
* Avoid referencing application delegate outlets or custom classes. Only design-time UIKit elements are supported.

==== Asset Reference

The default storyboard expects PNG assets with the following characteristics. All sizes are specified in points (pt); supply @2x and @3x variants for Retina displays when possible.

.Launch Screen Asset Reference
|===
|Asset | Purpose | Suggested 1x dimensions | Notes

|`Launch.Foreground.png`
|Brand mark centred on screen
|152×152
|Provide optional `Launch.Foreground@2x.png` (304×304) and `Launch.Foreground@3x.png` (456×456) for sharper output. Use transparency to let the background show through.

|`Launch.Background.png`
|Full-screen backdrop
|1024×1024
|Supply complementary `Launch.Background@2x.png` (2048×2048) and `Launch.Background@3x.png` (3072×3072) if you rely on artwork instead of a flat colour. Keep file sizes small (<2 MB) to avoid slowing startup.

|`LaunchScreen.storyboard`
|Complete custom layout
|N/A
|Target iOS 12.0 and later, enable Auto Layout, and include constraints for every view. Avoid timers or code connections.
|===

==== Testing Changes

NOTE: Changes to the launch screen will not take effect until the device has been restarted. I.e. If you install your app on a device, then you make changes to the launch screen and update the app, the launch screen won't change until the device is restarted.

When iterating locally with a Mac, open the generated Xcode project and run it on device or Simulator to verify that the layout adapts correctly. On Windows or Linux, submit a TestFlight or Ad Hoc build and validate on hardware before shipping.

=== Local Notifications on iOS and Android

Local notifications are similar to push notifications, except that they are initiated locally by the app, rather than remotely.  They are useful for communicating information to the user while the app is running in the background, since they manifest themselves as pop-up notifications on supported devices.

TIP: To set the notification icon on Android place a 24x24 icon named `ic_stat_notify.png` under the `native/android` folder of the app. The icon can be white with transparency areas

==== Sending Notifications

The process for sending a notification is:

. Create a https://www.codenameone.com/javadoc/com/codename1/notifications/LocalNotification.html[LocalNotification] object with the information you want to send in the notification.
. Pass the object to `Display.scheduleLocalNotification()`.

Notifications can either be set up as one-time only or as repeating.

===== Example Sending Notification

[source,java]
-----
LocalNotification n = new LocalNotification();
n.setId("demo-notification");
n.setAlertBody("It's time to take a break and look at me");
n.setAlertTitle("Break Time!");
n.setAlertSound("beep-01a.mp3");

Display.getInstance().scheduleLocalNotification(
        n,
        System.currentTimeMillis() + 10 * 1000, // fire date/time
        LocalNotification.REPEAT_MINUTE  // Whether to repeat and what frequency
);
-----

The resulting notification will look like

.Resulting notification in iOS
image::img/f7200840-677e-11e5-8fd7-41eb027f8a6c.png[Resulting notification in iOS,scaledwidth=20%]


==== Receiving Notifications

The API for receiving/handling local notifications is also similar to push.  Your application's main lifecycle class needs to implement the `com.codename1.notifications.LocalNotificationCallback` interface which includes a single method:

[source,java]
-----
public void localNotificationReceived(String notificationId)
-----

The `notificationId` parameter will match the `id` value of the notification as set using `LocalNotification.setId()`.

===== Example Receiving Notification

[source,java]
-----
public class BackgroundLocationDemo implements LocalNotificationCallback {
    //...

    public void init(Object context) {
        //...
    }

    public void start() {
        //...

    }

    public void stop() {
        //...
    }

    public void destroy() {
        //...
    }

    public void localNotificationReceived(String notificationId) {
        System.out.println("Received local notification "+notificationId);
    }
}
-----

NOTE: `localNotificationReceived()` is only called when the user responds to the notification by tapping on the alert.  If the user doesn't click on the notification, then this event handler will never be fired.

==== Canceling Notifications

Repeating notifications will continue until they are canceled by the app. You can cancel a single notification by calling:

[source,java]
-----
Display.getInstance().cancelLocalNotification(notificationId);
-----

Where `notificationId` is the string id that was set for the notification using `LocalNotification.setId()`.


=== iOS Beta Testing (Testflight)

Apple provides the ability to distribute beta versions of your application to beta testers using testflight. This allows you to recruit up to 1000 beta testers without the typical UDID limits a typical Apple account has.

NOTE: This is supported for pro users as part of the crash protection feature.

To take advantage of that capability use the build hint `ios.testFlight=true` and then submit the app to the store for
beta testing. Make sure to use a release build target.

=== Accessing Insecure URL's

Due to security exploits Apple blocked some access to insecure URL's which means that http code that worked before could stop working for you on iOS 9+. This is generally a good move, you should use https and avoid http as much as possible but that's sometimes impractical especially when working with an internal or debug environment.

You can disable the strict URL checks from Apple by using the venerable `ios.plistInject` build hint and setting it to:

[source,xml]
-----
<key>NSAppTransportSecurity</key><dict><key>NSAllowsArbitraryLoads</key><true/></dict>
-----

However, it seems that Apple will reject your app if you just include that and don't have a good reason.

=== Using Cocoapods

https://cocoapods.org/[CocoaPods] is a dependency manager for Swift and Objective-C Cocoa projects. It has over eighteen thousand libraries and can help you scale your projects elegantly.  Cocoapods can be used in your Codename One project to include native iOS libraries without having to go through the hassle of bundling the actual library into your project.  Rather than bundling .h and .a files in your ios/native directory, you can specify which "pods" your app uses via the `ios.pods` build hint.  (There are other build hints also if you need more advanced features).

**Examples**

Include the https://github.com/AFNetworking/AFNetworking[AFNetworking] library in your app:

----
ios.pods=AFNetworking
----

Include the https://github.com/AFNetworking/AFNetworking[AFNetworking] version 3.0.x library in your app:

----
ios.pods=AFNetworking ~> 3.0
----

For full versioning syntax specifying pods see the https://guides.cocoapods.org/syntax/podfile.html#pod[Podfile spec for the "pod" directive].

==== Including Multiple Pods

Multiple pods can be separated by either commas or semi-colons in the value of the `ios.pods` build hint.  E.g. To include GoogleMaps and AFNetworking, you could:

----
ios.pods=GoogleMaps,AFNetworking
----

Or specifying versions:

----
ios.pods=AFNetworking ~> 3.0,GoogleMaps
----

==== Other Pod Related Build Hints

`ios.pods.platform` : The minimum platform to target.  In some cases, Cocoapods require functionality that is not in older version of iOS.  For example, the GoogleMaps pod requires iOS 7.0 or higher, so you would need to add the `ios.pods.platform=7.0` build hint.

`ios.pods.sources` : Some pods require that you specify a URL for the source of the pod spec.  This may be optional if the spec is hosted in the central CocoaPods source (`https://github.com/CocoaPods/Specs.git`).

==== Converting PodFile To Build Hints

Most documentation for Cocoapods "pods" provide instructions on what you need to add to your Xcode project's PodFile.  Here is an example from the GoogleMaps cocoapod to show you how a PodFile can be converted into equivalent build hints in a Codename One project.

The GoogleMaps cocoapod directs you to add the following to your PodFile:

----
source 'https://github.com/CocoaPods/Specs.git'
platform :ios, '7.0'
pod 'GoogleMaps'
----

This would translate to the following build hints in your Codename One project:

----
ios.pods.sources=https://github.com/CocoaPods/Specs.git
ios.pods.platform=7.0
ios.pods=GoogleMaps
----

(Note that the `ios.pods.sources` directive is optional).

=== Including Dynamic Frameworks

If you need to use a dynamic framework (e.g. SomeThirdPartySDK.framework), and it isn't available via cocoapods, then you can add it to your project by simply zipping up the framework and copying it to your native/ios directory.

e.g. native/ios/SomeThirdPartySDK.framework.zip

There are no build hints necessary for this approach.  The build server will automatically detect the framework and link it into your app.
